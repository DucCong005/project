// Interface ƒë·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu s·∫£n ph·∫©m
interface Product {
    id: number | string;
    name: string;
    price: number;
    img: string;
    description: string;
    hot: number;
    idcate: number;
}

// üü¢ H√†m t·∫£i danh s√°ch s·∫£n ph·∫©m
const loadProducts = async (): Promise<void> => {
    try {
        const response = await fetch("http://localhost:5000/products");
        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ API");

        const products: Product[] = await response.json();  
        const productTableBody = document.getElementById("productTableBody") as HTMLTableSectionElement;

        if (!productTableBody) return;

        productTableBody.innerHTML = ""; // X√≥a danh s√°ch c≈©

        products.forEach((product) => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td><img src="images/${product.img || 'default-image.jpg'}" alt="${product.name}" style="width: 120px; height: 120px;"></td>
                <td>${product.name}</td>
                <td>${product.price.toLocaleString()} VND</td>
                <td>${product.hot}</td>
                <td>${product.idcate}</td>
                <td style="width: 120px">
                    <button onclick="showEditForm('${product.id}', '${product.name}', ${product.price}, '${product.img}', '${product.description}', ${product.hot}, ${product.idcate})">‚úèÔ∏è</button>
                    <button onclick="deleteProduct('${product.id}')">‚ùå</button>
                </td>
            `;
            productTableBody.prepend(row);
        });
    } catch (error) {
        console.error("L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m:", error);
        alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi API.");
    }
};

// üü¢ H√†m th√™m s·∫£n ph·∫©m
const addProduct = async (name: string, price: number, img: string, description: string, hot: number, idcate: number): Promise<void> => {
    if (!name.trim() || isNaN(price) || price <= 0 || !img.trim()) {
        alert("Vui l√≤ng nh·∫≠p th√¥ng tin s·∫£n ph·∫©m h·ª£p l·ªá!");
        return;
    }

    const newProduct: Product = {
        id: Date.now().toString(),
        name: name.trim(),
        price,
        img: img.trim(),
        description: description.trim(),
        hot,
        idcate
    };

    try {
        const response = await fetch('http://localhost:5000/products', {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(newProduct),
        });

        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m m·ªõi");

        alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
        const form = document.getElementById("productForm") as HTMLFormElement | null;
        form?.reset();
        toggleFormVisibility("productForm", false);

        loadProducts(); // C·∫≠p nh·∫≠t danh s√°ch
    } catch (error) {
        console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
        alert("Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi API.");
    }
};

// üü° H√†m hi·ªÉn th·ªã form ch·ªânh s·ª≠a s·∫£n ph·∫©m
const showEditForm = (id: string, name: string, price: number, img: string, description: string, hot: number, idcate: number): void => {
    const editForm = document.getElementById("editProductForm") as HTMLFormElement;
    const nameInput = document.getElementById("editProductName") as HTMLInputElement;
    const priceInput = document.getElementById("editProductPrice") as HTMLInputElement;
    const imgInput = document.getElementById("editProductImg") as HTMLInputElement;
    const descriptionInput = document.getElementById("editProductDescription") as HTMLInputElement;
    const hotInput = document.getElementById("editProductHot") as HTMLInputElement;
    const idcateInput = document.getElementById("editProductIdcate") as HTMLInputElement;

    // ƒêi·ªÅn th√¥ng tin s·∫£n ph·∫©m v√†o form
    nameInput.value = name;
    priceInput.value = price.toString();
    imgInput.value = img;
    descriptionInput.value = description;
    hotInput.value = hot.toString();
    idcateInput.value = idcate.toString();

    // L∆∞u ID s·∫£n ph·∫©m v√†o form
    editForm.dataset.productId = id;

    // Hi·ªÉn th·ªã form s·ª≠a
    toggleFormVisibility("editProductForm", true);
};

// üü° H√†m ch·ªânh s·ª≠a s·∫£n ph·∫©m
const editProduct = async (): Promise<void> => {
    const form = document.getElementById("editProductForm") as HTMLFormElement;
    const productId = form.dataset.productId;

    if (!productId) return;

    const nameInput = document.getElementById("editProductName") as HTMLInputElement;
    const priceInput = document.getElementById("editProductPrice") as HTMLInputElement;
    const imgInput = document.getElementById("editProductImg") as HTMLInputElement;
    const descriptionInput = document.getElementById("editProductDescription") as HTMLInputElement;
    const hotInput = document.getElementById("editProductHot") as HTMLInputElement;
    const idcateInput = document.getElementById("editProductIdcate") as HTMLInputElement;

    const name = nameInput.value.trim();
    const price = parseFloat(priceInput.value);
    const img = imgInput.value.trim();
    const description = descriptionInput.value.trim();
    const hot = parseInt(hotInput.value);
    const idcate = parseInt(idcateInput.value);

    if (!name || isNaN(price) || price <= 0 || !img || isNaN(hot) || isNaN(idcate)) {
        alert("Vui l√≤ng nh·∫≠p th√¥ng tin h·ª£p l·ªá!");
        return;
    }

    try {
        const response = await fetch(`http://localhost:5000/products/${productId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ name, price, img, description, hot, idcate }),
        });

        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m");

        alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
        form.reset();
        toggleFormVisibility("editProductForm", false);
        loadProducts();
    } catch (error) {
        console.error("L·ªói khi s·ª≠a s·∫£n ph·∫©m:", error);
        alert("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi API.");
    }
};

// üî¥ H√†m x√≥a s·∫£n ph·∫©m
const deleteProduct = async (id: string): Promise<void> => {
    if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) return;

    try {
        const response = await fetch(`http://localhost:5000/products/${id}`, { method: "DELETE" });

        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m");

        alert("S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a th√†nh c√¥ng!");
        loadProducts();
    } catch (error) {
        console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
        alert("X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi API.");
    }
};

// üü† H√†m hi·ªÉn th·ªã/·∫©n form
const toggleFormVisibility = (formId: string, show: boolean): void => {
    const form = document.getElementById(formId);
    if (form) {
        form.style.display = show ? "block" : "none";
    }
};

// H√†m hi·ªÉn th·ªã form th√™m s·∫£n ph·∫©m
const showAddForm = (): void => {
    toggleFormVisibility("productForm", true);
};

// H√†m ·∫©n form th√™m ho·∫∑c s·ª≠a s·∫£n ph·∫©m
const hideForms = (): void => {
    toggleFormVisibility("productForm", false);
    toggleFormVisibility("editProductForm", false);
};

// G·∫Øn c√°c s·ª± ki·ªán khi trang t·∫£i
document.addEventListener("DOMContentLoaded", () => {
    loadProducts();

    // X·ª≠ l√Ω th√™m s·∫£n ph·∫©m
    const productForm = document.getElementById("productForm") as HTMLFormElement;
    productForm?.addEventListener("submit", (event) => {
        event.preventDefault();
        const name = (document.getElementById("name") as HTMLInputElement).value.trim();
        const price = parseFloat((document.getElementById("price") as HTMLInputElement).value);
        const img = (document.getElementById("img") as HTMLInputElement).value.trim();
        const description = (document.getElementById("description") as HTMLInputElement).value.trim();
        const hot = parseInt((document.getElementById("hot") as HTMLInputElement).value);
        const idcate = parseInt((document.getElementById("idcate") as HTMLInputElement).value);
        addProduct(name, price, img, description, hot, idcate);
    });

    // X·ª≠ l√Ω c·∫≠p nh·∫≠t s·∫£n ph·∫©m
    const editForm = document.getElementById("editProductForm") as HTMLFormElement;
    editForm?.addEventListener("submit", (event) => {
        event.preventDefault();
        editProduct();
    });

    // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t hi·ªÉn th·ªã v√† ·∫©n form
    document.getElementById("showAddFormButton")?.addEventListener("click", showAddForm);
    document.getElementById("cancelAddFormButton")?.addEventListener("click", hideForms);
    document.getElementById("cancelEditFormButton")?.addEventListener("click", hideForms);
});

// Xu·∫•t c√°c h√†m ƒë·ªÉ d√πng trong HTML
(window as any).loadProducts = loadProducts;
(window as any).addProduct = addProduct;
(window as any).showEditForm = showEditForm;
(window as any).deleteProduct = deleteProduct;
